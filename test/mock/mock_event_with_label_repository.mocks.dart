// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_flavors/test/mock/mock_event_with_label_repository.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_flavors/common/event_with_label/event_with_label.dart'
    as _i5;
import 'package:flutter_flavors/database/app_database.dart' as _i2;
import 'package:flutter_flavors/database/repositories/events_with_label_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAppDatabase_0 extends _i1.SmartFake implements _i2.AppDatabase {
  _FakeAppDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [EventsWithLabelRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockEventsWithLabelRepository extends _i1.Mock
    implements _i3.EventsWithLabelRepository {
  @override
  _i2.AppDatabase get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeAppDatabase_0(
          this,
          Invocation.getter(#database),
        ),
        returnValueForMissingStub: _FakeAppDatabase_0(
          this,
          Invocation.getter(#database),
        ),
      ) as _i2.AppDatabase);

  @override
  _i4.Future<_i5.EventWithLabel?> create(_i5.EventWithLabel? domain) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [domain],
        ),
        returnValue: _i4.Future<_i5.EventWithLabel?>.value(),
        returnValueForMissingStub: _i4.Future<_i5.EventWithLabel?>.value(),
      ) as _i4.Future<_i5.EventWithLabel?>);

  @override
  _i4.Future<_i5.EventWithLabel?> delete(_i5.EventWithLabel? domain) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [domain],
        ),
        returnValue: _i4.Future<_i5.EventWithLabel?>.value(),
        returnValueForMissingStub: _i4.Future<_i5.EventWithLabel?>.value(),
      ) as _i4.Future<_i5.EventWithLabel?>);

  @override
  _i4.Future<_i5.EventWithLabel?> get(int? id) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [id],
        ),
        returnValue: _i4.Future<_i5.EventWithLabel?>.value(),
        returnValueForMissingStub: _i4.Future<_i5.EventWithLabel?>.value(),
      ) as _i4.Future<_i5.EventWithLabel?>);

  @override
  _i4.Future<List<_i5.EventWithLabel>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue:
            _i4.Future<List<_i5.EventWithLabel>>.value(<_i5.EventWithLabel>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i5.EventWithLabel>>.value(<_i5.EventWithLabel>[]),
      ) as _i4.Future<List<_i5.EventWithLabel>>);

  @override
  _i4.Future<_i5.EventWithLabel?> update(_i5.EventWithLabel? domain) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [domain],
        ),
        returnValue: _i4.Future<_i5.EventWithLabel?>.value(),
        returnValueForMissingStub: _i4.Future<_i5.EventWithLabel?>.value(),
      ) as _i4.Future<_i5.EventWithLabel?>);
}
